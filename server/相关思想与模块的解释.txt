客户端点击登录按钮，向服务端发送登录请求，服务端接收请求在数据库中查询用户email与密码是否正确，正确就给客户端返回登录成功，错误就返回错误，当登录成功回包发给客户端的时候，就要开始建立长连接，打开聊天服务，所以需要tcp，于是想到设计一个单例类的tcp管理类，可以发送连接成功信号和发送数据信号，收到成功信息后 ，在登录界面发送连接tcp的信号，然后会在tcp管理类中的响应此信号，定义槽函数，槽函数根据传过来的端口与主机名建立连接，连接建立成功与失败与否都会发送信号，在登陆界面响应这个信号，如果成功就向tcpmgr发送发送数据的信号，失败则打印信息给用户，在tcp管理类中接收发送数据的信号，实现发送逻辑

在CharServer 中 tcp发送数据如何做到有序的，且你是如何做到让数据发送完整，而不是发送两个hello world的时候，实际发送的却是hello hello world world?

使用一个消息队列来实现有序性和进行解耦

如何进行粘包处理的？

使用tlv格式，也就是前两字节保存id，中间两字节保存数据长度，后面则为数据域，并且使用一个判断头部节点是否接收完的标志，读取数据的时候，先读取头部节点，这样就知道了id与长度，然后判断剩余的接收到的数据长度是不是大于头部节点中得到长度，如果大于了就说明此时可能粘包问题，这是只需要读取指定长度就行，下次再从头节点开始读取

这个项目的接收节点的逻辑就是先接收头部节点，如果头部节点接收完整就开始接收数据域，将得到的头部节点的长度域作为我们预期要收到的数据长度，如果接收到的数据长度大于等于此长度说明长度够了，可以直接从缓存的_data 中读取指定长度的数据，然后继续开始读取头节点，如果小于说明长度不够继续读取数据域，读取成功后会把数据封装成逻辑节点（存储了从哪个链接来，以及消息是什么），投递给逻辑系统中的逻辑队列

发送数据的时候，投递刀消息队列前，会先判断队列长度是不是大于等于我们指定的最大长度，这可以防止过度消耗资源，如果小于，就放入队列中，并且判断此消息投递到队列前，队列是否已经有数据了，如果有就先不调用发送逻辑，也就是async_write，否则就调用，在发送逻辑的回调函数中，会从队列中删除发送完的节点，并且判断队列中是否还有数据，有的话就继续发送

逻辑队列有数据就会被一个消费线程取出，根据消息ID在map中找对应的处理函数来处理，在构造函数的时候就会把id与对应的处理逻辑注册到一个map中，方便后续调用，登录处理函数，就是通过从状态服务器中获取token是否匹配准确，并且根据uid来获取user信息，要么从数据库中找，要么从缓存中找，设置缓存就是为了减少数据库查询次数，因为查数据库效率低下，最后将用户相关token与name回包给客户端

状态grpc客户端有一个池子，池子中存储的是多个个stub，其中每个stub都可以和一个Grpc服务端建立通信，池子有取stub和还stub的接口，客户端有两个接口，一个是获取聊天服务器接口，一个是登录接口

状态服务器：
1）他也有一个得到聊天服务器的接口，该接口的功能是实现负载均衡，根据请求分配一个聊天服务器，分配策略是选择一个拥有最少连接数的服务器，生成唯一token给客户端
2）也有一个登录接口，其功能是根据请求验证用户ID和token是否有效
3）其用map来存储chatserver的相关信息，以及token的相关信息

